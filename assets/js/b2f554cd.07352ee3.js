"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","editUrl":"https://github.com/oskoperator/osko.dev/tree/main/blog/2023-11-08-hello-world/index.md","source":"@site/blog/2023-11-08-hello-world/index.md","title":"Hello World!","description":"Hi there! Consider this both a test of the Docusaurus blogging feature,","date":"2023-11-08T00:00:00.000Z","formattedDate":"November 8, 2023","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"osko","permalink":"/blog/tags/osko"},{"label":"introduction","permalink":"/blog/tags/introduction"}],"readingTime":1.175,"hasTruncateMarker":false,"authors":[{"name":"Robin Opletal","title":"OSKO maintainer, Infrastructure Engineer @ heureka.group","url":"https://robinopletal.com","imageURL":"https://codeberg.org/avatars/8c7fe1977d7e829152f7c71d5407b2c1?size=512","key":"ropletal"}],"frontMatter":{"slug":"hello-world","title":"Hello World!","authors":["ropletal"],"tags":["hello","osko","introduction"]},"unlisted":false},"content":"Hi there! Consider this both a test of the Docusaurus blogging feature,\\nas well as the OSKO team\'s first introduction.\\n\\nI am Robin, and together with Patrik Chadima ([@Hy3n4](https://github.com/Hy3n4))\\nand David Jetelina ([@djetelina](https://github.com/djetelina)) are building `osko`.\\n\\n## What\'s osko?\\n\\n`osko` is a Kubernetes operator that focuses on simplifying the management of everything\\nSLOs in the Kubernetes ecosystem.\\n\\nThe high-level goals and function of `osko` are:\\n\\n1. Take inputs in in the form of metrics from supported datasources (Mimir, Prometheus to start off with)\\n   as defined by [OpenSLO](https://github.com/OpenSLO/OpenSLO)-compatible resources\\n2. Based on OpenSLO definitions, produce\\n   [Prometheus recording rules](https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/)\\n   that will capture the intended availability of the service.\\n3. Write those Prometheus recording rules in the form of [`PrometheusRule`](https://github.com/prometheus-operator/prometheus-operator/blob/main/pkg/apis/monitoring/v1/prometheusrule_types.go)\\n   back into the cluster either for:\\n   - direct consumption by Prometheus/Thanos\\n   - loading of the rules into Mimir/Cortex using the built-in controller for `PrometheusRule` resources\\n   - loading of the rules into Mimir using Grafana Agent\\n   - anything else, depending on your use-case\\n\\n## Quick diagram of the above\\n\\n```mermaid\\ngraph TB\\n    subgraph User\\n        OpenSLO\\n        UserInput(User\'s input)\\n    end\\n\\n    subgraph Kubernetes\\n        Grafana\\n\\t\\t\\t\\tAlertingSystem(Alerting system)\\n        subgraph Osko\\n            osko(osko OpenSLO controllers)\\n            oskoPRreconciler(osko PrometheusRule controller)\\n        end\\n        apiServer(API Server)\\n        OpenSLO --\x3e|apply| apiServer\\n        apiServer --\x3e|read OpenSLO| osko\\n        osko --\x3e|write PrometheusRule| apiServer\\n        apiServer --\x3e|read PrometheusRule| oskoPRreconciler\\n        oskoPRreconciler --\x3e|write to API| MimirCortex(Mimir/Cortex)\\n        apiServer --\x3e|read PrometheusRule| PrometheusThanos(Prometheus Operator/Thanos)\\n\\n        MimirCortex --\x3e Grafana\\n        PrometheusThanos --\x3e Grafana\\n        Grafana --\x3e UserInput\\n\\t\\t\\t\\tMimirCortex --\x3e AlertingSystem\\n\\t\\t\\t\\tPrometheusThanos --\x3e AlertingSystem\\n\\t\\t\\t\\tAlertingSystem --\x3e UserInput\\n    end\\n```"}]}')}}]);