"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5860],{9829:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>h});var n=r(5893),t=r(1151);const s={slug:"hello-world",title:"Hello World!",authors:["ropletal"],tags:["hello","osko","introduction"]},i=void 0,l={permalink:"/blog/hello-world",editUrl:"https://github.com/oskoperator/osko.dev/tree/main/blog/2023-11-08-hello-world/index.md",source:"@site/blog/2023-11-08-hello-world/index.md",title:"Hello World!",description:"Hi there! Consider this both a test of the Docusaurus blogging feature,",date:"2023-11-08T00:00:00.000Z",formattedDate:"November 8, 2023",tags:[{label:"hello",permalink:"/blog/tags/hello"},{label:"osko",permalink:"/blog/tags/osko"},{label:"introduction",permalink:"/blog/tags/introduction"}],readingTime:1.33,hasTruncateMarker:!1,authors:[{name:"Robin Opletal",title:"OSKO maintainer, Infrastructure Engineer @ heureka.group",url:"https://robinopletal.com",imageURL:"https://codeberg.org/avatars/8c7fe1977d7e829152f7c71d5407b2c1?size=512",key:"ropletal"}],frontMatter:{slug:"hello-world",title:"Hello World!",authors:["ropletal"],tags:["hello","osko","introduction"]},unlisted:!1},a={authorsImageUrls:[void 0]},h=[{value:"What&#39;s osko?",id:"whats-osko",level:2},{value:"Quick diagram of the above",id:"quick-diagram-of-the-above",level:2}];function c(e){const o={a:"a",code:"code",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.p,{children:"Hi there! Consider this both a test of the Docusaurus blogging feature,\nas well as the OSKO team's first introduction."}),"\n",(0,n.jsxs)(o.p,{children:["I am Robin, and together with Patrik Chadima (",(0,n.jsx)(o.a,{href:"https://github.com/Hy3n4",children:"@Hy3n4"}),")\nand David Jetelina (",(0,n.jsx)(o.a,{href:"https://github.com/djetelina",children:"@djetelina"}),") are building ",(0,n.jsx)(o.code,{children:"osko"}),"."]}),"\n",(0,n.jsx)(o.h2,{id:"whats-osko",children:"What's osko?"}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"osko"})," is a Kubernetes operator that focuses on simplifying the management of everything\nSLOs in the Kubernetes ecosystem."]}),"\n",(0,n.jsxs)(o.p,{children:["The high-level goals and function of ",(0,n.jsx)(o.code,{children:"osko"})," are:"]}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["Take inputs in in the form of metrics from supported datasources (Mimir, Prometheus to start off with)\nas defined by ",(0,n.jsx)(o.a,{href:"https://github.com/OpenSLO/OpenSLO",children:"OpenSLO"}),"-compatible resources"]}),"\n",(0,n.jsxs)(o.li,{children:["Based on OpenSLO definitions, produce\n",(0,n.jsx)(o.a,{href:"https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/",children:"Prometheus recording rules"}),"\nthat will capture the intended availability of the service."]}),"\n",(0,n.jsxs)(o.li,{children:["Write those Prometheus recording rules in the form of ",(0,n.jsx)(o.a,{href:"https://github.com/prometheus-operator/prometheus-operator/blob/main/pkg/apis/monitoring/v1/prometheusrule_types.go",children:(0,n.jsx)(o.code,{children:"PrometheusRule"})}),"\nback into the cluster either for:","\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsx)(o.li,{children:"direct consumption by Prometheus/Thanos"}),"\n",(0,n.jsxs)(o.li,{children:["loading of the rules into Mimir/Cortex using the built-in controller for ",(0,n.jsx)(o.code,{children:"PrometheusRule"})," resources"]}),"\n",(0,n.jsx)(o.li,{children:"loading of the rules into Mimir using Grafana Agent"}),"\n",(0,n.jsx)(o.li,{children:"anything else, depending on your use-case"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(o.h2,{id:"quick-diagram-of-the-above",children:"Quick diagram of the above"}),"\n",(0,n.jsx)(o.mermaid,{value:"graph TB\n    subgraph User\n        OpenSLO\n        UserInput(User's input)\n    end\n\n    subgraph Kubernetes\n        Grafana\n\t\t\t\tAlertingSystem(Alerting system)\n        subgraph Osko\n            oskoSLOReconciler(osko SLO controller)\n            oskoSLIReconciler(osko SLI controller)\n            oskoDSReconciler(osko Datasource controller)\n            oskoPRReconciler(osko PrometheusRule controller)\n        end\n        apiServer(API Server)\n        OpenSLO --\x3e|apply| apiServer\n        apiServer --\x3e|read SLO spec| oskoSLOReconciler\n        apiServer --\x3e|read SLI spec| oskoSLIReconciler\n        apiServer --\x3e|read DS spec| oskoDSReconciler\n        oskoSLOReconciler --\x3e|write PrometheusRule| apiServer\n        oskoSLOReconciler --\x3e|write PR Ownership| oskoPRReconciler\n        apiServer --\x3e|read PrometheusRule| oskoPRReconciler\n        oskoDSReconciler --\x3e|read DS annotations| oskoPRReconciler\n        oskoPRReconciler --\x3e|reconcile PrometheusRule| apiServer\n        oskoPRReconciler --\x3e|write to API| MimirCortex(Mimir/Cortex)\n        apiServer --\x3e|read PrometheusRule| PrometheusThanos(Prometheus Operator/Thanos)\n\n        MimirCortex --\x3e Grafana\n        PrometheusThanos --\x3e Grafana\n        Grafana --\x3e UserInput\n        MimirCortex --\x3e AlertingSystem\n        PrometheusThanos --\x3e AlertingSystem\n        AlertingSystem --\x3e UserInput\n    end"})]})}function d(e={}){const{wrapper:o}={...(0,t.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);